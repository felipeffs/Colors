//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project/Scripts/Input/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Bit"",
            ""id"": ""72aa216c-111b-4548-94a7-f136e37e64fb"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""3614ceaf-8081-40bd-bd3b-dcfcd99edd1f"",
                    ""expectedControlType"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""80781d00-0f79-4a07-83f7-6c4bea702451"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapColor"",
                    ""type"": ""Button"",
                    ""id"": ""f288fc6f-ccfd-4bb7-a4bf-da595603cc10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Stick"",
                    ""id"": ""bb4f153f-8dae-4504-bb74-7dabae3d3bcd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2b86f75a-3e2b-40dc-be22-2ae8c15f759d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e1dd32a1-9f62-44cc-ac42-7619389a8668"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""eeffe273-f8a7-40e6-b3c2-b6ccc2f8ba02"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8cd5d279-770c-4e28-9649-4606e1a91780"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e07b1ed0-e2da-4882-a7a1-138ba46e7ef4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1390c8e3-d80a-4897-a670-c61824019c88"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2bb36e4-84a8-4ac3-be51-e9dab3df0547"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""331f1a03-ec33-49c4-87c1-af93c55ed72c"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36e8126f-d29a-4cb1-9389-2e6ce7c5116f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Level"",
            ""id"": ""55b2818e-74b3-4e1a-9bcf-fa083cc50957"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""3fef811b-a766-491a-991e-8eb2257ad706"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7c0eb994-a8b4-4075-9c99-13f76b7b4cd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82d06404-63c6-4fef-abf0-c5e910ffb587"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ab25e21-69f5-432e-8b42-1032355e40a2"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf145085-2083-42e2-a8a9-d4393715cd17"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67caa9fd-fe30-4024-a889-73c1b7c9d98d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""d6b6f0a6-9d3a-4cde-bcae-3e833bb0306e"",
            ""actions"": [
                {
                    ""name"": ""PointerSelect"",
                    ""type"": ""Button"",
                    ""id"": ""f3da9201-4837-4244-8a54-ed210301bfbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationSelect"",
                    ""type"": ""Button"",
                    ""id"": ""caf3a70a-9b9a-46a1-b590-56ff37a174c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""58d9ae54-23cf-493b-b065-f3936722efb2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NavigationUp"",
                    ""type"": ""Button"",
                    ""id"": ""7c3afe25-8a09-4ea4-bf0a-f771667ce5eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationDown"",
                    ""type"": ""Button"",
                    ""id"": ""1787c300-339f-4c36-acfa-1c04e5379f7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationLeft"",
                    ""type"": ""Button"",
                    ""id"": ""05e8187f-9396-4b9a-819e-33a34bde69ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationRight"",
                    ""type"": ""Button"",
                    ""id"": ""53517080-f82d-49d8-b1ea-f692703d7833"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""1cfc6383-9dee-4055-b900-343c16c31157"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63b4bbf8-bde1-4b18-afd8-035409f13b07"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c05ff71-44b0-4e4a-81f9-f84da8cc6b59"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7bf01cc-fc65-4008-8557-380d8da33e02"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b1b0b4-f1e5-4ee6-a1d7-d16afcbedbd2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24f5e5d0-4a11-4764-81d6-ab9e4c5ff689"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faa1e07c-2d72-4468-8af1-9c5390396cdf"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8573bd2a-1114-473e-a816-31caeebfaaa4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b5aa9f8-55e4-4e03-89e6-826e86684faf"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""079587c0-e47d-490c-8751-ed2f2dec6686"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca08cc3e-8ca5-4998-8420-5fe904a5becd"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4579c52a-c6fb-4f61-9bad-61397ab207e1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90d16669-0503-4e30-b24e-358eb53ddf10"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""844eaac2-26c4-400e-9f09-104dac0407b4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigationSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bit
        m_Bit = asset.FindActionMap("Bit", throwIfNotFound: true);
        m_Bit_Walk = m_Bit.FindAction("Walk", throwIfNotFound: true);
        m_Bit_Jump = m_Bit.FindAction("Jump", throwIfNotFound: true);
        m_Bit_SwapColor = m_Bit.FindAction("SwapColor", throwIfNotFound: true);
        // Level
        m_Level = asset.FindActionMap("Level", throwIfNotFound: true);
        m_Level_Restart = m_Level.FindAction("Restart", throwIfNotFound: true);
        m_Level_Pause = m_Level.FindAction("Pause", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_PointerSelect = m_Menu.FindAction("PointerSelect", throwIfNotFound: true);
        m_Menu_NavigationSelect = m_Menu.FindAction("NavigationSelect", throwIfNotFound: true);
        m_Menu_Position = m_Menu.FindAction("Position", throwIfNotFound: true);
        m_Menu_NavigationUp = m_Menu.FindAction("NavigationUp", throwIfNotFound: true);
        m_Menu_NavigationDown = m_Menu.FindAction("NavigationDown", throwIfNotFound: true);
        m_Menu_NavigationLeft = m_Menu.FindAction("NavigationLeft", throwIfNotFound: true);
        m_Menu_NavigationRight = m_Menu.FindAction("NavigationRight", throwIfNotFound: true);
        m_Menu_Delta = m_Menu.FindAction("Delta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bit
    private readonly InputActionMap m_Bit;
    private IBitActions m_BitActionsCallbackInterface;
    private readonly InputAction m_Bit_Walk;
    private readonly InputAction m_Bit_Jump;
    private readonly InputAction m_Bit_SwapColor;
    public struct BitActions
    {
        private @PlayerInputs m_Wrapper;
        public BitActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Bit_Walk;
        public InputAction @Jump => m_Wrapper.m_Bit_Jump;
        public InputAction @SwapColor => m_Wrapper.m_Bit_SwapColor;
        public InputActionMap Get() { return m_Wrapper.m_Bit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BitActions set) { return set.Get(); }
        public void SetCallbacks(IBitActions instance)
        {
            if (m_Wrapper.m_BitActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_BitActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_BitActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_BitActionsCallbackInterface.OnWalk;
                @Jump.started -= m_Wrapper.m_BitActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BitActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BitActionsCallbackInterface.OnJump;
                @SwapColor.started -= m_Wrapper.m_BitActionsCallbackInterface.OnSwapColor;
                @SwapColor.performed -= m_Wrapper.m_BitActionsCallbackInterface.OnSwapColor;
                @SwapColor.canceled -= m_Wrapper.m_BitActionsCallbackInterface.OnSwapColor;
            }
            m_Wrapper.m_BitActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @SwapColor.started += instance.OnSwapColor;
                @SwapColor.performed += instance.OnSwapColor;
                @SwapColor.canceled += instance.OnSwapColor;
            }
        }
    }
    public BitActions @Bit => new BitActions(this);

    // Level
    private readonly InputActionMap m_Level;
    private ILevelActions m_LevelActionsCallbackInterface;
    private readonly InputAction m_Level_Restart;
    private readonly InputAction m_Level_Pause;
    public struct LevelActions
    {
        private @PlayerInputs m_Wrapper;
        public LevelActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_Level_Restart;
        public InputAction @Pause => m_Wrapper.m_Level_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Level; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelActions set) { return set.Get(); }
        public void SetCallbacks(ILevelActions instance)
        {
            if (m_Wrapper.m_LevelActionsCallbackInterface != null)
            {
                @Restart.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnRestart;
                @Pause.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_LevelActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public LevelActions @Level => new LevelActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_PointerSelect;
    private readonly InputAction m_Menu_NavigationSelect;
    private readonly InputAction m_Menu_Position;
    private readonly InputAction m_Menu_NavigationUp;
    private readonly InputAction m_Menu_NavigationDown;
    private readonly InputAction m_Menu_NavigationLeft;
    private readonly InputAction m_Menu_NavigationRight;
    private readonly InputAction m_Menu_Delta;
    public struct MenuActions
    {
        private @PlayerInputs m_Wrapper;
        public MenuActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerSelect => m_Wrapper.m_Menu_PointerSelect;
        public InputAction @NavigationSelect => m_Wrapper.m_Menu_NavigationSelect;
        public InputAction @Position => m_Wrapper.m_Menu_Position;
        public InputAction @NavigationUp => m_Wrapper.m_Menu_NavigationUp;
        public InputAction @NavigationDown => m_Wrapper.m_Menu_NavigationDown;
        public InputAction @NavigationLeft => m_Wrapper.m_Menu_NavigationLeft;
        public InputAction @NavigationRight => m_Wrapper.m_Menu_NavigationRight;
        public InputAction @Delta => m_Wrapper.m_Menu_Delta;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @PointerSelect.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPointerSelect;
                @PointerSelect.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPointerSelect;
                @PointerSelect.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPointerSelect;
                @NavigationSelect.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationSelect;
                @NavigationSelect.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationSelect;
                @NavigationSelect.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationSelect;
                @Position.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPosition;
                @NavigationUp.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationUp;
                @NavigationUp.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationUp;
                @NavigationUp.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationUp;
                @NavigationDown.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationDown;
                @NavigationDown.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationDown;
                @NavigationDown.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationDown;
                @NavigationLeft.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationLeft;
                @NavigationLeft.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationLeft;
                @NavigationLeft.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationLeft;
                @NavigationRight.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationRight;
                @NavigationRight.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationRight;
                @NavigationRight.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnNavigationRight;
                @Delta.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnDelta;
                @Delta.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnDelta;
                @Delta.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnDelta;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PointerSelect.started += instance.OnPointerSelect;
                @PointerSelect.performed += instance.OnPointerSelect;
                @PointerSelect.canceled += instance.OnPointerSelect;
                @NavigationSelect.started += instance.OnNavigationSelect;
                @NavigationSelect.performed += instance.OnNavigationSelect;
                @NavigationSelect.canceled += instance.OnNavigationSelect;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @NavigationUp.started += instance.OnNavigationUp;
                @NavigationUp.performed += instance.OnNavigationUp;
                @NavigationUp.canceled += instance.OnNavigationUp;
                @NavigationDown.started += instance.OnNavigationDown;
                @NavigationDown.performed += instance.OnNavigationDown;
                @NavigationDown.canceled += instance.OnNavigationDown;
                @NavigationLeft.started += instance.OnNavigationLeft;
                @NavigationLeft.performed += instance.OnNavigationLeft;
                @NavigationLeft.canceled += instance.OnNavigationLeft;
                @NavigationRight.started += instance.OnNavigationRight;
                @NavigationRight.performed += instance.OnNavigationRight;
                @NavigationRight.canceled += instance.OnNavigationRight;
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IBitActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSwapColor(InputAction.CallbackContext context);
    }
    public interface ILevelActions
    {
        void OnRestart(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnPointerSelect(InputAction.CallbackContext context);
        void OnNavigationSelect(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnNavigationUp(InputAction.CallbackContext context);
        void OnNavigationDown(InputAction.CallbackContext context);
        void OnNavigationLeft(InputAction.CallbackContext context);
        void OnNavigationRight(InputAction.CallbackContext context);
        void OnDelta(InputAction.CallbackContext context);
    }
}
